<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Why Not Wingnut?</title><link href="http://nathanielca.se/" rel="alternate"></link><link href="http://nathanielca.se/feeds/fossrit.atom.xml" rel="self"></link><id>http://nathanielca.se/</id><updated>2015-04-29T16:33:46-04:00</updated><entry><title>Charsheet 1.0</title><link href="http://nathanielca.se/fossrit/charsheet-10.html" rel="alternate"></link><updated>2015-04-29T16:33:46-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2015-04-29:fossrit/charsheet-10.html</id><summary type="html">&lt;p&gt;I've been doing some work for &lt;a class="reference external" href="https://charsheet-qalthos.rhcloud.com"&gt;Charsheet&lt;/a&gt; recently, fixing old bugs and adding
new features. I figured it was about time for a 1.0, so I tagged it and released
it to the wild. Many thanks to &lt;a class="reference external" href="http://oddshocks.com"&gt;oddshocks&lt;/a&gt; not only for the original 0.1
version of charsheet, but for continued assistance in massaging the site into
something cool.&lt;/p&gt;
&lt;div class="section" id="notable-features"&gt;
&lt;h2&gt;Notable Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Character classes! You are now given a class based on your favorite language
(by klocs &lt;a class="footnote-reference" href="#kloc" id="id1"&gt;[1]&lt;/a&gt;), and your top two stats on the page.&lt;/li&gt;
&lt;li&gt;Fixing Github integration. This was technically fixed in August, but it was
not finalized or pushed upstream until a few weeks ago.
- Github backend switched from pygithub3 back to pygithub&lt;/li&gt;
&lt;li&gt;Completely removed tw2 from the site &lt;a class="footnote-reference" href="#tw2" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Charsheet will now deploy on Openshift!
- But not with a MySQL database. This is a known &lt;a class="reference external" href="https://github.com/civx/knowledge/issues/5"&gt;bug&lt;/a&gt; with knowledge.&lt;/li&gt;
&lt;li&gt;Gnu-cat Will no longer stick around when the back button is pressed
- Yes, it is actually called GNU-cat.&lt;/li&gt;
&lt;li&gt;Fixed some incompatibilities with Pyramid 1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's more, but that is the big stuff I'm seeing from the git log. In any
case, the site is live, so just hop over to
&lt;a class="reference external" href="https://charsheet-qalthos.rhcloud.com"&gt;https://charsheet-qalthos.rhcloud.com&lt;/a&gt; and put in your Github, Ohloh, and/or
Coderwall username(s) and see what your coder character sheet looks like!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="kloc" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Kilo-Lines Of Code, or a unit of 1000 lines of code for the
uninitiated.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="tw2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This bears some explanation, but it was just tw2.forms, and the forms were
static, meaning they were quite underutilized. Forms are now pure HTML
forms.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="charsheet"></category><category term="openshift"></category></entry><entry><title>Deploying MediaGoblin 2: SELinux</title><link href="http://nathanielca.se/fossrit/deploying-mediagoblin-2-selinux.html" rel="alternate"></link><updated>2015-04-29T16:33:46-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2015-04-29:fossrit/deploying-mediagoblin-2-selinux.html</id><summary type="html">&lt;p&gt;So, &lt;a class="reference external" href="deploying-mediagoblin-1-fastcgi-vs-uwsgi.html"&gt;earlier&lt;/a&gt;, I wrote about my experience deploying &lt;a class="reference external" href="http://mediagoblin.org"&gt;MediaGoblin&lt;/a&gt;. None of
this was necessary, I was mostly trying to diagnose some problems I was having
and found uWSGI a more comfortable environment than FastCGI.&lt;/p&gt;
&lt;p&gt;And what problem was this, you ask? Well, when I first ran through the
installation instructions, everything worked swimmingly (the port issues
mentioned aside). The server it was running on, however, was running Fedora 17,
while Fedora 20 has just reached alpha status recently. So, in the interest of
retaining compatibility and security fixes, there was a fun afternoon of double
distribution updates.&lt;/p&gt;
&lt;p&gt;At first, everything seemed to be working fine, but then MediaGoblin began
inexplicably throwing 'permission denied' errors. As usually happens in these
cases, the culprit was SELinux, an additional security layer which normally
transparently protects your system, until something unexpected shows up.&lt;/p&gt;
&lt;p&gt;I don't pretend to understand SELinux, but I do understand the security
improvements it brings. Plus I don't want to disable it on a system I don't
own.&lt;/p&gt;
&lt;p&gt;Long, boring story short (and it was very long, being noticed first, and not
fixed until well after I figured out how to get uWSGI running), I got something
reasonably close to what I think I'm supposed to do. The key was the command
&lt;tt class="docutils literal"&gt;setsebool &lt;span class="pre"&gt;-P&lt;/span&gt; httpd_can_network_connect on&lt;/tt&gt;, which re-enabled the ability for
nginx to talk to programs on a network socket, as in the MediaGoblin
documentation.&lt;/p&gt;
&lt;p&gt;I initially changed to a file-based Unix socket, but I could not, for the life
of me figure out how to enable this simply without changing a large number of
SELinux booleans. There may be some simpler way of accomplishing this, but alas,
in this case SELinux has once again bested me.&lt;/p&gt;
</summary><category term="mediagoblin"></category><category term="yacht"></category><category term="SELinux"></category></entry><entry><title>Deploying MediaGoblin 1: FastCGI vs uWSGI</title><link href="http://nathanielca.se/fossrit/deploying-mediagoblin-1-fastcgi-vs-uwsgi.html" rel="alternate"></link><updated>2013-09-23T13:20:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2013-09-23:fossrit/deploying-mediagoblin-1-fastcgi-vs-uwsgi.html</id><summary type="html">&lt;p&gt;Last week I did a thing I really wasn't expecting to. I deployed
&lt;a class="reference external" href="http://mediagoblin.org"&gt;MediaGoblin&lt;/a&gt; to FOSS&amp;#64;RIT's yacht server &lt;a class="reference external" href="http://yacht.rit.edu/mediagoblin/"&gt;here&lt;/a&gt;. The initial setup and
&lt;a class="reference external" href="https://mediagoblin.readthedocs.org/en/v0.5.0/siteadmin/deploying.html"&gt;instructions&lt;/a&gt; are some of the clearest and straightforward I have seen in an
open-source project.&lt;/p&gt;
&lt;p&gt;There are several reasons I haven't written this up earlier. One of the reasons
was the web server configuration file was more complex than I was used to, so
in order to get the server running quickly, I made a new config file for port
8080. Unfortunately, due to various arcane networking policies, while this
allowed anyone inside RIT to access the server, it was still not available to
the outside world.&lt;/p&gt;
&lt;p&gt;Also, though the instructions were very clear, they used a few things I had not
used before, and a few things that weren't used in the way I was used to them.
This is the first blog post on the subject, detailing my confusion with
FastCGI and its eventual replacement with uWSGI.&lt;/p&gt;
&lt;div class="section" id="what-the-flup"&gt;
&lt;h2&gt;What the &lt;tt class="docutils literal"&gt;flup&lt;/tt&gt;?&lt;/h2&gt;
&lt;p&gt;MediaGoblin, as documented, uses FastCGI to route requests from the web server
to MediaGoblin. The CGI in FastCGI refers to the 'Common Gateway Interface',
a standard developed to allow web servers to act as 'gateways' to serve not
just files but the output of executable programs. The MediaGoblin docs describe
how to use a python module called &lt;tt class="docutils literal"&gt;flup&lt;/tt&gt; to enable this communication.&lt;/p&gt;
&lt;p&gt;There's a bit more to it than that, but in Python land, this
turns out to be a more questionable prospect than it might seem. Python already
has its own gateway interface (called the web server gateway interface, or
WSGI) which it is using to talk to FastCGI to have the WSGI turned into CGI so
that it can be interpreted by the server and turned into a web page. This would
be fine except that there are other WSGI-specific modules which can translate
the WSGI into a web page directly.&lt;/p&gt;
&lt;p&gt;At this point, I assume that you are either skipping ahead past things you
already know or are horribly lost, so I'll just say that I eventually moved
MediaGoblin from the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;paste-&amp;gt;flup-&amp;gt;FastCGI-&amp;gt;nginx&lt;/span&gt;&lt;/tt&gt; contraption it was to a more
comprehensible &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;uWSGI-&amp;gt;nginx&lt;/span&gt;&lt;/tt&gt;, and this is how I did it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-uwsgi"&gt;
&lt;h2&gt;Enter uWSGI&lt;/h2&gt;
&lt;p&gt;First, I changed the nginx config to talk to uWSGI instead of FastCGI.
As I was also trying to move MediaGoblin to a subdirectory, I also added the
&lt;tt class="docutils literal"&gt;uWSGI_modifier1&lt;/tt&gt; line and altered &lt;tt class="docutils literal"&gt;SCRIPT_NAME&lt;/tt&gt; accordingly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Load MediaGoblin via uWSGI&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/mediagoblin/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uWSGI_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kn"&gt;uWSGI_pass&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26543&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;# our understanding vs nginx&amp;#39;s handling of script_name vs&lt;/span&gt;
   &lt;span class="c1"&gt;# path_info don&amp;#39;t match :)&lt;/span&gt;
   &lt;span class="kn"&gt;uWSGI_param&lt;/span&gt; &lt;span class="s"&gt;SCRIPT_NAME&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/mediagoblin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kn"&gt;uWSGI_modifier1&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, I altered the &lt;tt class="docutils literal"&gt;lazystarter.sh&lt;/tt&gt; file to accommodate being run with
uWSGI. This is a bit complicated as &lt;tt class="docutils literal"&gt;lazyserver.sh&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;lazystarter.sh&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;lazycelery.sh&lt;/tt&gt; are all actually the same file, with certain things changing
depending on the name by which it is invoked. I changed two sections &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;,
first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;local_bin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./bin&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$selfname&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
    lazyserver.sh&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;starter_cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;paster
        &lt;span class="nv"&gt;ini_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;paste
        &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;became:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;local_bin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./bin&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$selfname&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
    lazyserver.sh&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;starter_cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;uwsgi
        &lt;span class="nv"&gt;ini_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;paste
        &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then near the very end of the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CELERY_ALWAYS_EAGER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$selfname&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
    lazyserver.sh&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;$starter&lt;/span&gt; serve &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ini_file&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --reload
        &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;became:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CELERY_ALWAYS_EAGER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$selfname&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
    lazyserver.sh&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;$starter&lt;/span&gt; --plugin python --virtualenv . --ini-paste &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ini_file&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method allows you to keep using all the information on how to run
MediaGoblin from paste.ini, while using uWSGI to do all the heavy lifting.
The socket still needs to be defined with the command, though, with
&lt;tt class="docutils literal"&gt;./lazyserver.sh &lt;span class="pre"&gt;--socket&lt;/span&gt; 127.0.0.1:26543&lt;/tt&gt; or whatever socket you are using.&lt;/p&gt;
&lt;p&gt;As a side note, this also allows us to use your system's uWSGI &lt;a class="reference external" href="http://uWSGI-docs.readthedocs.org/en/latest/Emperor.html"&gt;emperor&lt;/a&gt; to
manage bringing up the uWSGI process for you. If you are running &lt;a class="reference external" href="http://mediagoblin.readthedocs.org/en/v0.5.0/siteadmin/production-deployments.html#separate-celery"&gt;celery as a
separate process&lt;/a&gt;, this still needs to be done somehow, but otherwise (or if
you've kept &lt;tt class="docutils literal"&gt;CELERY_ALWAYS_EAGER=true&lt;/tt&gt;), then MediaGoblin should be managed
automatically. This is the format I eventually settled upon, using the
following uWSGI ini file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;python&lt;/span&gt;
&lt;span class="na"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;mediagoblin&lt;/span&gt;
&lt;span class="na"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;mediagoblin&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1:26543&lt;/span&gt;
&lt;span class="na"&gt;virtualenv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/srv/www/mediagoblin&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/srv/www/mediagoblin&lt;/span&gt;
&lt;span class="na"&gt;ini-paste&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/srv/www/mediagoblin/paste.ini&lt;/span&gt;
&lt;span class="na"&gt;logto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/srv/www/mediagoblin/mg.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-next"&gt;
&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;As far as I can tell, this should have been all we needed to get running.
Well, this wouldn't have been necessary either, except for some of the
repercussions of the other big problem that reared it's head, SELinux.&lt;/p&gt;
&lt;p&gt;But that is &lt;a class="reference external" href="deploying-mediagoblin-2-selinux.html"&gt;another post&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This statement is not entirely accurate. I actually made a new link
named &lt;tt class="docutils literal"&gt;lazyuwsgi.sh&lt;/tt&gt; and added the sections instead of altering the
existing ones. This format was chosen for clarity.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="mediagoblin"></category><category term="yacht"></category><category term="uWSGI"></category></entry><entry><title>Building a Schoolserver</title><link href="http://nathanielca.se/fossrit/building-a-schoolserver.html" rel="alternate"></link><updated>2013-08-05T02:04:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2013-08-05:fossrit/building-a-schoolserver.html</id><summary type="html">&lt;p&gt;One of my tasks for this summer has been to try and get the FOSSBox's
schoolserver up and running again. We previouly had one a number of years ago,
but the hardware failed some time ago and the system itself was running a
hacked-together Debian build and did not have access to some of the actual
schoolserver scripts.&lt;/p&gt;
&lt;p&gt;I first attempted to run the &lt;a class="reference external" href="http://wiki.laptop.org/go/XS_Installing_Software_0.7"&gt;instructions&lt;/a&gt; for the latest proper release of
the XO Schoolserver (henceforth XS), but this did not end very well. For one,
the instructions (and many automated scripts) assume you have two network
cards: one for the internal LAN to which the XO laptops connect, and another
connecting to the Internet. This assumption that the XS would be the gateway
device for a network of XO laptops would be fine in most deployments where
there is no existing infrastructure to get in the way, but at RIT where there
is not only significant infrastructure, but infrastructure I cannot easily
modify or control, it is less applicable.&lt;/p&gt;
&lt;p&gt;Here are the steps I have taken to turn a fresh CentOS/RHEL server into an XS:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Set up &lt;a class="reference external" href="http://fedoraproject.org/wiki/EPEL"&gt;EPEL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add the &lt;a class="reference external" href="http://wiki.laptop.org/go/XS_Installing_Software_0.7#Installing_on_top_of_existing_OS_installation"&gt;OLPC-XS repository&lt;/a&gt; to your yum config.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;yum install ejabberd idmgr &lt;span class="pre"&gt;ds-backup-server&lt;/span&gt; &lt;span class="pre"&gt;xs-activity-server&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xs-domain-config&lt;/span&gt; &amp;lt;domain name&amp;gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xs-setup&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system-config-firewall-tui&lt;/span&gt;&lt;/tt&gt; to unblock ports 22, 80, 8080, 5222, 5223,
and 4369&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xs-setup&lt;/span&gt;&lt;/tt&gt; is the most trying of the commands, because it does a lot of
background work to set up the OLPC versions of many config files (while still
leaing the originals in place).&lt;/p&gt;
&lt;p&gt;There's more to it, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xs-setup&lt;/span&gt;&lt;/tt&gt; tends to have some annoying side effects,
some of the config files need to be manually updated, but this is the general
idea. This post will be further updated as time goes on.&lt;/p&gt;
&lt;p&gt;The main problem seen so far is that this is being set up on a RHEL server
backed by XEN, and the OLPC-XS repository keeps wanting to install an
incompatible kernel, hosing the system on a regular basis.&lt;/p&gt;
</summary><category term="sugar"></category><category term="schoolserver"></category></entry><entry><title>National Day of Civic Hacking</title><link href="http://nathanielca.se/fossrit/national-day-of-civic-hacking.html" rel="alternate"></link><updated>2013-06-02T03:18:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2013-06-02:fossrit/national-day-of-civic-hacking.html</id><summary type="html">&lt;p&gt;One of the projects I worked on during the &lt;a class="reference external" href="http://hackforchange.org/fossrit-rochester-civic-hackathon"&gt;Rochester edition&lt;/a&gt; of the
&lt;a class="reference external" href="http://hackforchange.org"&gt;National Day of Civic Hacking&lt;/a&gt; hackathon was not actually anything intended
for the hackathon, but a short project I wrote last summer.&lt;/p&gt;
&lt;p&gt;If you remember from &lt;a class="reference external" href="introducing-fossrit-timeline-year-in-review.html"&gt;my last post&lt;/a&gt; on the subject, I had made three files,
one for each of the years that the FOSSBox had been keeping track of its
activities on the &lt;a class="reference external" href="http://foss.rit.edu/timeline"&gt;timeline&lt;/a&gt;. The files were very silly- all the data was
loaded on the fly from a JSON file, so the only thing in the files was the structure and the 'decoration' text.&lt;/p&gt;
&lt;p&gt;Clearly this was not something that could stand. Today I finally managet to get
all the files together into one page. Now, when the page loads, it scans the
JSON file for all years mentioned, and populates a drop-down list with all the
years it has found. the first (and usually latest) year's data is then loaded
onto the page.&lt;/p&gt;
&lt;p&gt;When the user clicks on another year from the list, the content is reloaded with
data from the apropriate year. If you want to see it in action, the new review
page for timeline now lives &lt;a class="reference external" href="http://foss.rit.edu/timeline/summary.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="hackathon"></category><category term="timeline"></category><category term="jQuery"></category></entry><entry><title>A note on lxml</title><link href="http://nathanielca.se/fossrit/a-note-on-lxml.html" rel="alternate"></link><updated>2013-06-01T20:46:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2013-06-01:fossrit/a-note-on-lxml.html</id><summary type="html">&lt;p&gt;This post is being written from the &lt;a class="reference external" href="http://hackforchange.org/fossrit-rochester-civic-hackathon"&gt;Rochester edition&lt;/a&gt; of the
&lt;a class="reference external" href="http://hackforchange.org"&gt;National Day of Civic Hacking&lt;/a&gt; hackathon.&lt;/p&gt;
&lt;p&gt;I've been doing a lot of things with &lt;a class="reference external" href="http://pygal.org"&gt;pygal&lt;/a&gt; lately. It's a really neat tool
for making SVG graphs in python. One 'problem' is that it needs &lt;a class="reference external" href="http://lxml.de"&gt;lxml&lt;/a&gt;, and
that has C extensions that need to be compiled. This isn't too bad, though
sometimes it makes me stop and install a compiler. The real problem is the
external header files it needs to compile.&lt;/p&gt;
&lt;p&gt;NOTE: this blog post is entirely the result of my own laziness. Had I simply
perused the &lt;a class="reference external" href="http://lxml.de/installation.html#installation"&gt;documentation&lt;/a&gt;, I would have found this much sooner. Thus, this
post is solely a marker of my own eagerness to get things running quickly.&lt;/p&gt;
&lt;p&gt;After I was asked for the third time how to install lxml, I finally decided I
would figure out how it works so it could be done properly. I did find out
what the needed package was, but I also found that if the shell variable
&lt;tt class="docutils literal"&gt;STATIC_DEPS=true&lt;/tt&gt; was set prior to installation, lxml would seek out and
download its requirements for you. I don't know how legitimate this is for a
Python install, but it was certainly quite useful for me and the others
trying to use lxml. It even works inside a virtualenv, though I don't know why
it wouldn't.&lt;/p&gt;
</summary><category term="hackathon"></category><category term="python"></category><category term="wat"></category></entry><entry><title>American Greetings Hackathon Followup</title><link href="http://nathanielca.se/fossrit/american-greetings-hackathon-followup.html" rel="alternate"></link><updated>2013-01-24T22:33:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2013-01-24:fossrit/american-greetings-hackathon-followup.html</id><summary type="html">&lt;p&gt;Last weekend was the &lt;a class="reference external" href="http://foss.rit.edu/node/425"&gt;American Greetings Hackathon&lt;/a&gt;, and it was one of
the most successful yet. We got more than 70 people attending and
working on projects, and most of those projects had at least something
working by the end of the 24 hours.&lt;/p&gt;
&lt;p&gt;I worked with &lt;a class="reference external" href="http://blog.helixoide.com/"&gt;Ross Delinger&lt;/a&gt;, with occasional contributions from &lt;a class="reference external" href="http://www.ryansb.com/"&gt;Ryan
S. Brown&lt;/a&gt; on a project eventually called &lt;a class="reference external" href="http://github.com/ryansb/hetHUD"&gt;netHUD&lt;/a&gt;. The idea was to
take the new &lt;a class="reference external" href="http://nethackwiki.com/wiki/NetHack_4"&gt;NetHack 4&lt;/a&gt; network &lt;a class="reference external" href="http://nethackwiki.com/wiki/NetHack_4_Network_Protocol"&gt;protocol&lt;/a&gt; and try to make something
more than just another interface to NetHack.&lt;/p&gt;
&lt;p&gt;Originally, we set out simply to connect to the NetHack server and have
a second channel of information. Ideally, we would make calls to the
server and have it update us about games in progress. This turned out to
be problematic for a number of reasons, but the most immediate was that
we could not get two simultaneous connections to the server.&lt;/p&gt;
&lt;p&gt;This meant we had to redesign our service. Instead of being a second
stream, we would need to piggyback on the initial connection, which
meant writing a server proxy. This may not have been the only way to do
it, or even the best way to do it, but that's just how we roll. The
eventual structure (all written in delicious &lt;a class="reference external" href="http://www.twistedmatrix.com"&gt;twisted&lt;/a&gt; protocols)
looked something like this:&lt;/p&gt;
&lt;img alt="Module diagram" class="ditaa" src="static/images/04bc3643.png" /&gt;
&lt;p&gt;tee.py acted as the proxy and sent any messages received from the
NetHack server to the controller, which cached the current state of all
the games and sent updates to any listening netHUD instances. This way,
you connect to NetHack as usual and log in, and then in a second window,
you connect to the server again on the netHUD port and get a slew of
information about your current inventory, nearby points of interest (eg.
monsters, items, traps), and other information. There's a lot more we
could add to this over time; one of the ideas thrown around at the
beginning was integration with the NetHack wiki, providing additional
information about items, monsters, even entire levels.&lt;/p&gt;
&lt;/p&gt;</summary><category term="hackathon"></category></entry><entry><title>Recent Projects: Democrat &amp; Chronicle</title><link href="http://nathanielca.se/fossrit/recent-projects-democrat-chronicle.html" rel="alternate"></link><updated>2012-08-22T22:16:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2012-08-22:fossrit/recent-projects-democrat-chronicle.html</id><summary type="html">&lt;p&gt;One of the new projects I had this summer was a project proposed by the
&lt;a class="reference external" href="http://www.democratandchronicle.com/"&gt;Democrat &amp;amp; Chronicle&lt;/a&gt;. The project involved access to a selection of
emails sent to the Greece school district in the wake of the YouTube
video involving several of their students. The idea was that we would
get a dump of email bodies and try to glean some information out of
them.&lt;/p&gt;
&lt;p&gt;The first hurdle, unfortunately, was getting at the information. Shortly
after we were approached with the request, I received an Access file
containing around 5000 email bodies to go through. Being what we are,
most of the resources in the FOSSBox are oriented around Linux, and no
one about had a copy of Access installed to get the data into a more
friendly format.&lt;/p&gt;
&lt;p&gt;In theory, there are ODBC drivers for access databases, just like there
are for any other database system. In practice, however, they seem to
only exist for Windows machines which, while not surprising, was
disappointing. This led me to dig out an old VirtualBox VM with Windows
XP on it, install the Access drivers from Microsoft, and throw
LibreOffice on it, too. There's other ways I could have gotten this done
instead of LibreOffice, but I was still hoping this could be a simple
action at the moment.&lt;/p&gt;
&lt;p&gt;LibreOffice Base eventually got into the Access file, but then the
troubles started again. It initially prompted me to save a LibreOffice
database file, which sounded great to me... it could export it
immediately, then I could copy it over and finish the task in Linux.
Unfortunately, all this file did was create a small wrapper around the
Access file, telling LibreOffice where the file was located, and what
was needed to open it. So now I was back to trying to export the data.
LibreOffice, though, was not willing to play along. I admit I am less
than familiar with the Base component of LibreOffice, however some
exploration and more searching online led me to believe I could not do
the simple translation of data from one format to another from within
Base.&lt;/p&gt;
&lt;p&gt;Instead, I needed to select the table I was interested in (the only
table in the database), tell LibreOffice to copy the table, then open a
new spreadsheet in LibreOffice Calc and save the data that way. While
this makes some sense to me (Base being simply for basic interaction
with databases, Calc for manipulating raw data), I was dismayed that I
could not find some way to export a single table to a common data
format, like CSV, instead of having to go through yet another step. In
any case, once I dumped the data into Calc, I could easily save it to
CSV, drop that into my real computer, stop the VM, and get to work for
real.&lt;/p&gt;
&lt;p&gt;The end result is &lt;a class="reference external" href="https://github.com/Qalthos/mail_scrape"&gt;this&lt;/a&gt;. I'm not sure it will ever be of any
particular use to anyone other than myself to remind me how to use the
Python NLTK module (whose documentation seems to be geared more towards
researchers than those already familiar with Python), and is hardcoded
to certain facets of the data I was given, but it does manage to do a
few things, and at each step it dumps the state of the data to a file so
I can inspect the process and consider possible improvements.&lt;/p&gt;
&lt;/p&gt;</summary><category term="journalism"></category><category term="data alchemy"></category></entry><entry><title>Introducing: FOSS@RIT Timeline Year in Review</title><link href="http://nathanielca.se/fossrit/introducing-fossrit-timeline-year-in-review.html" rel="alternate"></link><updated>2012-08-22T22:15:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2012-08-22:fossrit/introducing-fossrit-timeline-year-in-review.html</id><summary type="html">&lt;p&gt;Yesterday, I sat down with Remy and went over the last of the things we
need to do to close out the summer. There was a long list of items,
split into two sections, each containing the same sort of stuff.
FOSS&amp;#64;RIT has done a lot of stuff in the past year, and we need to be
able to tell people about it.&lt;/p&gt;
&lt;p&gt;The first section concerned the few things we had done that hadn't yet
hit &lt;a class="reference external" href="http://foss.rit.edu/timeline/"&gt;Timeline&lt;/a&gt;. This was a fairly sizable chunk of things, and we
needed a good, rapid-entry way of getting more events in there. No
problem, I had done some work on that before, I could get it running and
dump events in there no problem.&lt;/p&gt;
&lt;p&gt;The second (and slightly longer) list dealt with things we needed to
compile some information about as a sort of &amp;quot;here's what we've done&amp;quot;
report. The list of things that needed to be in that was... just about
the same as the last one. Remy planned to go through the Timeline site
and add entries from it, categorize them, and push it to foss.rit.edu.&lt;/p&gt;
&lt;p&gt;This deeply concerned me on two distinct levels. First was the part of
me that never liked writing. I've mentioned it here once before, and I
feel I've gotten better since then, but the concept of wading through
all that data to write a report was not something that made me happy.
The other part was that all the things in the second list had to be
added to the timeline at some point anyway, or were likewise available
from other sources. When Remy showed me what he had written for 2010, it
was obvious this could be easily replicated in code.&lt;/p&gt;
&lt;p&gt;About an hour of JavaScript wrangling later, I had made &lt;a class="reference external" href="http://foss.rit.edu/timeline/2011.html"&gt;this&lt;/a&gt;. Also
&lt;a class="reference external" href="http://foss.rit.edu/timeline/2010.html"&gt;this&lt;/a&gt;, and if you're reading this from about a year in the future,
&lt;a class="reference external" href="http://foss.rit.edu/timeline/2012.html"&gt;this&lt;/a&gt; should even exist. It's still needs some tweaking, the years are
hardcoded in the documents, the pages aren't linked from the main
timeline page, and I'd rather have them all use one common file than
make a new one each year, but it works, it's fairly similar to what was
handwritten last year, and it gets updated every time something gets
added to Timeline.&lt;/p&gt;
&lt;/p&gt;</summary><category term="data alchemy"></category><category term="jQuery"></category><category term="timeline"></category></entry><entry><title>Final Stretch</title><link href="http://nathanielca.se/fossrit/final-stretch.html" rel="alternate"></link><updated>2012-02-29T16:15:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2012-02-29:fossrit/final-stretch.html</id><summary type="html">&lt;p&gt;So the past two days have been madness trying to get the recently
christened WebBotWar (or just WebBot) to actually work on the web.&lt;/p&gt;
&lt;p&gt;We had it working locally some time last week (I think... the days are
really starting to mush together), but OpenShift was a whole other
thing. This boiled down to two basic problems we had:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pybotwar depended on pyBox2D, which needs to compile, which doesn't
work well even when you have control of the machine&lt;/li&gt;
&lt;li&gt;We were relying on memcached to provide cheap communication between
the pybotwar process and the frontend. As near as I can tell,
memcached is not actually supported on OpenShift Express, though that
might not actually be true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first was surprisingly easy to fix, though it took me some time to
actually think of the solution. In the final setup, there are
essentially three repositories: our modified pybotwar, the TG2 webbot
frontend, and a meta-repository containing both of the previous two in
the proper places. This third repo is not meant to be actually used to
develop, its only purpose is to be pushed to OpenShift and act as a
quick pull for someone looking to run WebBotWar themselves. The
practical upshot of this is that if we commit pyBox2D inside the
pybotwar directory of our meta-repo, pybotwar can find its dependencies,
and no one else needs to have to bother with it.&lt;/p&gt;
&lt;p&gt;The second problem was more tricky, and eventually resulted in a rather
simple patch that just happened to take me around 12 hours to get right.
A quick Google of OpenShift Express Python and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/NoSQL"&gt;NoSQL&lt;/a&gt; led me to
MongoDB, which has some benefits and drawbacks compared to just shoving
bits into memory, but seems to work very well in practice and is
probably the right way to go regardless. To be perfectly fair, memcached
&lt;em&gt;is&lt;/em&gt; a type of NoSQL, but MongoDB is actually supported by OpenShift in
an easily-installable manner, and despite its more finicky syntax, it
works, which is something I failed to get with memcached.&lt;/p&gt;
&lt;p&gt;Meanwhile, the rest of my team was hard at work making massive progress
on other fronts. Facebook authentication works, as does uploading custom
robot definitions, though I don't think the two are plugged into each
other yet. As well, there are brand new pretty images for the robots and
the turrets.&lt;/p&gt;
&lt;p&gt;There's a few outstanding problems left, but (as long as I don't push
anything broken) you can have a look at webbotwar in action &lt;a class="reference external" href="webbotwar-qalthos.rhcloud.com"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/p&gt;</summary><category term="pybotwar"></category><category term="hackathon"></category><category term="FLOSS-seminar"></category><category term="webbotwar"></category><category term="openshift"></category></entry><entry><title>TurboGears2 on OpenShift, just like it should be</title><link href="http://nathanielca.se/fossrit/turbogears2-on-openshift-just-like-it-should-be.html" rel="alternate"></link><updated>2012-02-03T06:47:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2012-02-03:fossrit/turbogears2-on-openshift-just-like-it-should-be.html</id><summary type="html">&lt;p&gt;After much work and many trials, I finally have an app pushed to
OpenShift with no manual tweaking necessary. As often happens with these
things, the solution was much simpler than expected.&lt;/p&gt;
&lt;p&gt;Note: I still don't have a foolproof 'follow this' solution ready, as
the one I built works exactly as I want it to, but:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It needs a lot of love and cleanup&lt;/li&gt;
&lt;li&gt;It requires an external git script that isn't well documented&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first isn't much of a problem, and can be worked out over the next
few days. I'm more worried about the second one. For the curious, the
script is &lt;a class="reference external" href="https://github.com/apenwarr/git-subtree"&gt;git-subtree&lt;/a&gt;, which acts like a submodule except it is more
transparent to the repository which is a plus given OpenShift's odd
structure.&lt;/p&gt;
&lt;p&gt;Back on topic, when we last left off this topic, I had finally gotten
OpenShift to acknowledge a project in a directory other than tg2app.
This is useful because, at least for me, most of my projects are not
named tg2app. That turned out to be stupid problem I had made for
myself, but unfortunately, the next problem to tackle was not.&lt;/p&gt;
&lt;p&gt;You see, when setting up an app on OpenShift, you have very little
control over the actual environment the app is running in (this isn't
entirely true, but is a useful fiction, especially as the service is
likely to become more 'plug-and-go'). One of the few ways you can retain
control is through a series of post-commit hooks, one of which was
starting off the problematic section of code. When you first push your
code to OpenShift, it needs to set up your database so it is ready to
store information and do other databasey things.&lt;/p&gt;
&lt;p&gt;Naturally, this wasn't happening.&lt;/p&gt;
&lt;p&gt;First up was a problem with OpenShift. Python's default egg cache (not
too important, it's a place python can use to extract files from
installed packages temporarily) is not writable in OpenShift, so that
needs to be set before anything else will work. Next, the proper MySQL
library is not installed by TurboGears by default (the default is to use
sqlite), so that had to be added to the requires list.&lt;/p&gt;
&lt;p&gt;And then I hit yet another wall. Despite everything being set up
properly, I could not connect to the MySQL database on OpenShift. It
wasn't a problem with MySQL, because I could connect fine with the MySQL
client. It wasn't even a problem with SQLAlchemy, because I was able to
connect from a short example script. Finally, in a fit of insanity, I
tried running the build script directly. I'm not even sure why, I was
just at the point I would do anything just to see if it would work.&lt;/p&gt;
&lt;p&gt;And, strangely enough, &lt;em&gt;it did&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This had some pretty profound implications. It meant something was
different during the build hook than in normal execution. Armed with
this new knowledge, I headed over to OpenShift's IRC channel to get some
answers (I had actually been in there for some time prior, just not with
enough information for the more ruby-oriented users to help).&lt;/p&gt;
&lt;p&gt;They told me that yes, indeed there was a difference. During the build
step, the database is stopped, hence why I could not connect to it.
There were, however, hooks for deploy and post_deploy, during both of
which the database would be running. I moved the calls needing database
access to deploy, and suddenly everything worked! I made a few more
changes, cleaned up my tree, and tested it on a new app I wanted to get
on OpenShift, and it (mostly) worked. There were a few problems left,
but they seemed to be mostly my fault (and problems with the
application, not OpenShift), so it looked like I had finally fixed
deploying a standard TurboGears app. I've no doubt that there's
something I've left out, but I'm pretty amazed at the progress I've made
so far, and learned a lot about both OpenShift and TurboGears.&lt;/p&gt;
</summary><category term="hackathon"></category><category term="FLOSS-seminar"></category><category term="openshift"></category></entry><entry><title>FLOSS Seminar Update</title><link href="http://nathanielca.se/fossrit/floss-seminar-update.html" rel="alternate"></link><updated>2012-01-19T17:46:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2012-01-19:fossrit/floss-seminar-update.html</id><summary type="html">&lt;p&gt;So it's week 5, what has been going on?&lt;/p&gt;
&lt;p&gt;The class has split into three groups, working on different games. My
group's idea is a social update to the venerable likes of &lt;a class="reference external" href="http://robocode.sourceforge.net/"&gt;robocode&lt;/a&gt;,
though how exactly that is going to pan out is still debatable.&lt;/p&gt;
&lt;p&gt;Ideally, this would comprise of a wrapper around the basic game, not
requiring much tweaking of the internals, though a new interface would be
required for use on the web. All in all the class is shaping up to be
pretty interesting.&lt;/p&gt;
&lt;/p&gt;</summary><category term="FLOSS-seminar"></category></entry><entry><title>First FLOSS Seminar post</title><link href="http://nathanielca.se/fossrit/first-floss-seminar-post.html" rel="alternate"></link><updated>2011-12-01T20:22:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2011-12-01:fossrit/first-floss-seminar-post.html</id><summary type="html">&lt;p&gt;So this quarter I am taking a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Free_and_open_source_software#FLOSS"&gt;FLOSS&lt;/a&gt; Seminar being taught by &lt;a class="reference external" href="http://threebean.org"&gt;Bean&lt;/a&gt;
which should be pretty awesome. As a graduate student (as well as a
fairly advanced FLOSS citizen) there are a few extra things going to be
required of me, and we're working on ironing out the exact details now.
It looks like it's going to be a really cool quarter.&lt;/p&gt;
</summary><category term="FLOSS-seminar"></category></entry><entry><title>Imagine RIT 2011</title><link href="http://nathanielca.se/fossrit/imagine-rit-2011.html" rel="alternate"></link><updated>2011-05-08T03:16:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2011-05-08:fossrit/imagine-rit-2011.html</id><summary type="html">&lt;p&gt;So I've been absent for a while lately, but with good reason. I've been
preparing for Imagine RIT, which was held earlier today.
After pulling possibly my longest day's hack yesterday (1pm to 4am,
approximately), I woke up at 9 and headed over to the Innovation Center
to talk to people about FOSS. All day long, the FOSSBox was filled with
curious people, looking to find out what it is we did. We had kids
poking around on the OLPCs, checking out our software, and occasionally
getting lost opening new programs. Every time I finished showing a group
around all the different projects hosted in the FOSSBox, a brand new
group would appear and start asking questions. It was tiring, especially
on about three hours of sleep, but it was quite fun and exciting showing
off our work to new people.&lt;/p&gt;
&lt;p&gt;Of particular interest was Lemonade Stand, which seemed to excite many
of the children who came around. Most seemed to pick up the game with
minimal instruction (though it helped that by now I know very well which
areas to explain... they should get tightened in the future) and most
had lots of fun despite the large quantities of math involved.
And the backdrop to all this was &lt;a class="reference external" href="rise.rit.edu"&gt;Rise Above the Crowd&lt;/a&gt;, the project I
was spending so much time polishing yesterday. I don't know if I could
explain what exactly Rise is, other than a real-time journalism and news
collection framework, which doesn't really explain anything. Basically,
users submit stories and photos to Rise, which in turn keep track of
popular and recent content and display this information to strategically
placed screens throughout the campus. After a few hiccoughs, the servers
were online and serving data to the public, who then voted on their
favorite stories. At the FOSSBOX, we had the projector set up serving
the HD display mode so people could see what was current while they were
there. Since I was the one most familiar with the system at the time, I
tried to field any questions that popped up at the time to the best of
my knowledge, though sometimes that wasn't much help. As the day
progressed, we uncovered a few new bugs in the new system, and have some
new tasks before the final release.&lt;/p&gt;
&lt;p&gt;All in all, a very exciting and fun weekend. We made a few contacts,
introduced a few more people to FOSS&amp;#64;RIT, and gave away at least 40
LiveCDs. I think that qualifies as quite a success.&lt;/p&gt;
</summary><category term="journalism"></category><category term="lemonade"></category><category term="sugar"></category><category term="Rise"></category><category term="OPL"></category></entry><entry><title>Special Election Time</title><link href="http://nathanielca.se/fossrit/special-election-time.html" rel="alternate"></link><updated>2011-03-29T03:07:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2011-03-29:fossrit/special-election-time.html</id><summary type="html">&lt;p&gt;Rochester is having a special election tomorrow to choose a new Mayor,
as the previous Mayor, Robert Duffy, is now the Lieutenant Governor of
New York. I've been following the race with some interest despite not
being registered to vote in this area, especially since I know one of
the candidates.
But more exciting than the actual business of an politics is the
election itself, which gives a great opportunity to introduce &lt;a class="reference external" href="http://foss.rit.edu/election/"&gt;Election
Scraper 2.0&lt;/a&gt;.
You may remember the old version. It was largely untested, had a few
design issues, and wasn't very pretty to look at. Through the election
night, I tweaked and honed it, until finally, mere minutes before the
close of the last poll, it gave a very close approximation to an
accurate number.
We probably won't have that many problems this time around. But who
knows? I'm looking forward to an exciting night in any case, and I'll be
ready to fix any problems as they come.&lt;/p&gt;
</summary><category term="election"></category></entry><entry><title>Election Aftermath</title><link href="http://nathanielca.se/fossrit/election-aftermath.html" rel="alternate"></link><updated>2011-03-29T02:59:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2011-03-29:fossrit/election-aftermath.html</id><summary type="html">&lt;p&gt;So the election was almost a week ago. Here's how our little experiment
turned out.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://farm2.static.flickr.com/1386/5143595646_9e4e56f556.jpg"&gt;|image0|&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The evening started out rather slowly, with information trickling in
about races that were all but confirmed. We had the Innovation Center's
display set up with various maps and information, and my page in the
center in five columns, all showing zero votes.
We waited until the polls closed at 9PM, and then we waited some more
for the information to travel to the Board of Elections and make it onto
the XML file. Even at this point, I still didn't know if the scraper was
going to work, so I was checking the &lt;a class="reference external" href="http://66.192.47.50/flashresults.html"&gt;official unofficial results page&lt;/a&gt;
to make sure they didn't have anything we didn't.&lt;/p&gt;
&lt;p&gt;When the first results popped on the screen, it was amazing. When
results kept pouring in, it was even more impressive. When we finally
figured out that all those numbers were wrong, it was time to start
getting things fixed.&lt;/p&gt;
&lt;p&gt;There were several differences from what the Canadian data had led me to
expect, and so I spent most of the night fixing small problems as they
showed up. First, votes in NYS are tallied by party, even if multiple
parties are running the same candidate. This was quite different from
what I had been led to expect, and so the numbers we started out with
were quite.. bizarre. Before we realized what was going on, it looked
like Paladino was beating Cuomo in Monroe County almost 4 to 1. Checking
back with the flash page revealed that I was only counting one party for
each candidate, and whichever came last would show up on the screen. I
had to keep a running count for each candidate rather than throwing out
old data when going through the file.&lt;/p&gt;
&lt;p&gt;Having fixed that, and seeing that the numbers now matched what was
coming out of the flash page, I settled back down and watched the third
parties fight for 50,000 votes. That is, until someone pointed out to me
that Andrew Cuomo was currently listed with 1.7 million votes for Monroe
County alone. Seeing as how the total population of the area is only
about 1 million, there was clearly something wrong. It seems that in my
haste to keep count of how many votes a candidate got from each party, I
was not clearing these numbers once the file was done being read. This
was probably the hardest fix I had to make during the night, as it broke
some of the models I had naively put forth on how the program should
run.&lt;/p&gt;
&lt;p&gt;I eventually ended up with a workable solution, though I was sad to see
the third party numbers were much lower now. There remained only one
small problem, being that most vote totals seemed to be exactly twice
what the flash site claimed they were. Finally, I realized that there
was a master 'total votes' line for each candidate which made most of
the hacks and shims I had written into my scraper obsolete. Instead, I
could simply show only this total line and everything would be right
again.&lt;/p&gt;
&lt;p&gt;This was an amazing experience, especially how the work I was doing was
being picked up by people outside of RIT. Having to think fast on my
feet was a new one too. I, like most programmers, usually like to
examine a problem in detail and have time to test theories before
publishing changes. Here, I was coding just about as fast as I could to
fix each bug that turned up, and we managed to make it work before the
last precincts rolled in.&lt;/p&gt;
&lt;p&gt;But even more than that, this was an opportunity to take the skills and
tools I've been accumulating through my time at RIT and make them do
something more than just a class assignment. This wasn't just another
program to be written and forgotten, this was something that represented
the school to some of the public who perhaps hadn't heard about what
we're doing here. And that is cool.&lt;/p&gt;
</summary><category term="journalism"></category><category term="election"></category></entry><entry><title>Election Night</title><link href="http://nathanielca.se/fossrit/election-night.html" rel="alternate"></link><updated>2011-03-29T02:59:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2011-03-29:fossrit/election-night.html</id><summary type="html">&lt;p&gt;So election night is tonight. I'll have free time soon.
The main reason for my lack of time lately has to do with the election.
On Wednesday, just before I was going to classes, I got a call from Remy
asking what my schedule was and if I'd like to take a trip to WXXI to
talk with Rachel Ward and at their election coverage.
A few hours later, we're in the lobby of WXXI, being mistaken for
musicians (as anyone who meets Remy for the first time is likely to do),
and waiting for Rachel to come down.
We took a quick tour of the facilities, met a few other people, and got
down to business. Monroe County's Board of Elections hosts a server with
the live election information on a static ip and takes it down once the
election is done. Further, this information is released in the form of
a flash app, making it harder to move the information.
After a short discussion, we decided that we weren't going to get
anywhere without making a call to the BoE. Rachel did her magic on the
phone, getting more information out of them than I ever could have done.
To make a long story short, this flash application is driven by an XML
file (actually two) and that the system was provided by the company who
made the machines and was pretty much a black box as far as they were
concerned.
A short bit of Googling later, I had identified another location that
used these machines: London, Ontario. using their XML files as a base, I
made a quick scraper that spat out a basic table of races and
candidates. It wasn't pretty, but it worked.
Over the next few days, I poked and prodded at it, adding features and
eventually moving to an HTML output and checking against a few more
locations, and cleaned up the code some more. We met with Rachel once
more yesterday, set the site up to be running on innovationtrail.org,
and started the countdown.
The current version of the scraper is now running on
&lt;a class="reference external" href="http://foss.rit.edu/election/"&gt;http://foss.rit.edu/election/&lt;/a&gt; and should update its information every 30
seconds, once information exists.&lt;/p&gt;
</summary><category term="journalism"></category><category term="election"></category></entry><entry><title>Winter Hackathon 2</title><link href="http://nathanielca.se/fossrit/winter-hackathon-2.html" rel="alternate"></link><updated>2011-02-19T02:58:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2011-02-19:fossrit/winter-hackathon-2.html</id><summary type="html">&lt;p&gt;So I was gonna do a write-up about the winter hackathon.
That didn't happen too much.
But there's another one going on now.
^__^&lt;/p&gt;
</summary><category term="hackathon"></category></entry><entry><title>Wikiotics Visual Tweak</title><link href="http://nathanielca.se/fossrit/wikiotics-visual-tweak.html" rel="alternate"></link><updated>2010-12-08T23:51:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-12-08:fossrit/wikiotics-visual-tweak.html</id><summary type="html">&lt;p&gt;So &lt;a class="reference external" href="http://trosehfoss.blogspot.com/"&gt;trose&lt;/a&gt; and I have been asked to put a bow on the Wikiotics work
while we're between projects. We both hit some bumps at the end of the
quarter, so there's a few unused hours left to put into this project.
One of the things we've been tasked with is looking at the CSS and
seeing if there is anything we can do to it to make it look a little
better. Now, neither trose nor I are designers by any stretch of the
imagination, but we've got a few ideas that might go a ways to making
Wikiotics look more attractive.
&lt;a class="reference external" href="http://3.bp.blogspot.com/_NuCXZozR8O8/TQAXjymF2KI/AAAAAAAAAi8/02g5WgJiCj0/s320/Screenshot-Wikiotics%2B-%2BNamoroka-1.png"&gt;|image0|&lt;/a&gt;
This is how Wikiotics looks today. The different actions possible on a
page are hanging out awkwardly in the center, and there's no clear
division between the header and the content. After looking at this for a
while, trose and I decided that we would emulate a few of the more
reasonable designs of the more common wiki systems out there.
&lt;a class="reference external" href="http://4.bp.blogspot.com/_NuCXZozR8O8/TQAXkGhFoPI/AAAAAAAAAjE/lnUp7vNtbAI/s320/Screenshot-Wikiotics%2B-%2BNamoroka.png"&gt;|image1|&lt;/a&gt;
This is how Wikiotics looks on our local git. The 'tabs' have been moved
to the right, and pushed further into the top bar (maybe too much).
Further, the active tab bleeds into the content area, which is lightly
colored to mark it as a separate area from the header and footer areas.
The changed text and color on the top bar are not our doing, this
appears to be a side-effect of running a subinstance of another page as
we are, as is the case with the red link color.
These changes are a small step, but I think they go some way towards
making Wikiotics a bit more approachable to outsiders. There are a few
more things to be done on Friday, but I don't think we're yet done
looking at this.&lt;/p&gt;
</summary><category term="wikiotics"></category></entry><entry><title>Wikiotics at the Constellation Commons</title><link href="http://nathanielca.se/fossrit/wikiotics-at-the-constellation-commons.html" rel="alternate"></link><updated>2010-12-08T23:30:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-12-08:fossrit/wikiotics-at-the-constellation-commons.html</id><summary type="html">&lt;p&gt;This happened quite some time ago now, but with the election coverage I
haven't had much time to get this out.
Two weeks ago, Taylor and I were asked to appear at the opening of the
Constellation Commons for Global Learning, to show off Wikiotics as a
student project and set up Wikiotics on all the computers. We got to
show the site off to President Destler and to a few foreign language
professors who were all quite excited about such a thing existing.
In all we showed off the project to a fair number of people and got a
very positive reaction from most of them. I don't know if we've seen any
more users from this, but it seems to me it should help spread the word
about Wikiotics.&lt;/p&gt;
</summary><category term="wikiotics"></category></entry><entry><title>Lemonade Stand 2.1 Released</title><link href="http://nathanielca.se/fossrit/lemonade-stand-21-released.html" rel="alternate"></link><updated>2010-11-12T07:03:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-11-12:fossrit/lemonade-stand-21-released.html</id><summary type="html">&lt;p&gt;I am proud to announce the immediate availability of Lemonade Stand 2.1,
with a quarter's worth of work and effort behind it.
There are few gameplay changes in this release, but it feels like a
brand new game thanks to the wonderful new art assets courtesy of &lt;a class="reference external" href="http://jtmengel.blogspot.com/"&gt;JT&lt;/a&gt;.
There's also the beginning of a help system, and many generalizations in
the code to make adding new features even easier than before.
We're a little late for a midnight release, but for my first real game
release, I don't think we did half bad.
&lt;a class="reference external" href="http://activities.sugarlabs.org/en-US/sugar/addon/4321"&gt;http://activities.sugarlabs.org/en-US/sugar/addon/4321&lt;/a&gt;&lt;/p&gt;
</summary><category term="lemonade"></category></entry><entry><title>Lemonade Recap</title><link href="http://nathanielca.se/fossrit/lemonade-recap.html" rel="alternate"></link><updated>2010-11-10T20:26:00-05:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-11-10:fossrit/lemonade-recap.html</id><summary type="html">&lt;p&gt;So here we are at the end of the quarter. Have we accomplished our
goals? I think so.
We've gotten a lot done in the last ten weeks. We got some new images,
we got some new ideas into the game, and on the whole, it looks much
better. The game is slowly taking shape into something people might
actually want to play.&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;But let's compare what we've actually done to our goals. The first goal
was to get an updated background image with prettier graphics that
changed with the weather. This is definitely done, and has been for a
week or two. We've since invented a few more graphics that need to be
included in the main screen, but the placeholders we have should do for
now.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Second, we wanted to get a graphical store in place and working. That's
almost done, and should be finished before the end of the week. The
store is fully functional, it just needs a few tweaks and some feedback
on the user's current inventory. For the time being that can be fixed
until we can get a more permanent solution later.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Finally, the overlooked problem we were ignoring this whole time, an in
game help system. This is moving along, not well, but it should be
functional by our release.&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="lemonade"></category></entry><entry><title>Lemonade Week... 8?</title><link href="http://nathanielca.se/fossrit/lemonade-week-8.html" rel="alternate"></link><updated>2010-10-26T23:59:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-10-26:fossrit/lemonade-week-8.html</id><summary type="html">&lt;p&gt;So... lots of stuff has happened in the last few weeks.
First, we have a new background, thanks to JT. In fact, we have three
now, and as of five minutes ago, a different one will show up depending
on the current weather.
There's also been a lot of behind-the-scenes updates to make adding new
events and weather types easier in the future. Generally, all that kind
of stuff goes in constants.py, but that might have to change if we need
to add too much more stuff.
We've got a few exciting ideas we hope to get done in the next few
weeks, and I look forward to seeing what we can get done.&lt;/p&gt;
</summary><category term="lemonade"></category><category term="sugar"></category></entry><entry><title>Updating git</title><link href="http://nathanielca.se/fossrit/updating-git.html" rel="alternate"></link><updated>2010-10-04T19:39:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-10-04:fossrit/updating-git.html</id><summary type="html">&lt;p&gt;We here at RIT are working on our own branch of Ductus, and Ductus got a
big addition over the weekend, namespaces. Unfortunately, our repository
didn't know anything about that and needed to be updated.
Now, I'm not a novice to using git, nor are any of the people in the
FOSSBOX. But we'd never had to worry about upstream repositories, for
all of our projects, we *were* upstream.
Taylor and I finally worked it out*, and now we're trying to fix all
the problems that came up with the new hotness as best as we can. but
even when you feel comfortable with something, you can never quite
escape the possibility that something you hadn't considered might show
up.
* The process, for reference, as near as I can figure
git remote add
git pull
git push&lt;/p&gt;
</summary><category term="wikiotics"></category></entry><entry><title>Wikiotics Week 2</title><link href="http://nathanielca.se/fossrit/wikiotics-week-2.html" rel="alternate"></link><updated>2010-09-29T18:36:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-09-29:fossrit/wikiotics-week-2.html</id><summary type="html">&lt;p&gt;We're into week 2 of Wikiotics' &lt;a class="reference external" href="http://alpha.wikiotics.org/wiki/four_week_plan"&gt;four week plan&lt;/a&gt; to push Wikiotics
development, so I thought I'd get out all the stuff I did last week.
First, in order to get myself acquainted with the user interface I
translated (badly) the introduction lesson into &lt;a class="reference external" href="http://alpha.wikiotics.org/wiki/Russian_lessons"&gt;Russian&lt;/a&gt; (and later
tapped &lt;a class="reference external" href="http://rockettium.net/wordpress/"&gt;Ellen Rocket's&lt;/a&gt; German prowess for a &lt;a class="reference external" href="http://alpha.wikiotics.org/wiki/German_lessons"&gt;German&lt;/a&gt; one).
Later I was asked to look into creoleparser to see if I could fix &lt;a class="reference external" href="http://code.google.com/p/creoleparser/issues/detail?id=42"&gt;bug
42&lt;/a&gt; to disable external image loading, which we also want for Ductus.
Getting into yet another python codebase so soon was interesting,
especially when I had to switch back and forth looking at things
&lt;a class="reference external" href="http://trosehfoss.blogspot.com/"&gt;Taylor&lt;/a&gt; was doing.
That's all I really got into for week one, but now that I'm fairly
comfortable with the various technologies being used, I think things
will really start rolling soon&lt;/p&gt;
</summary><category term="wikiotics"></category></entry><entry><title>Lemons Taking Off</title><link href="http://nathanielca.se/fossrit/lemons-taking-off.html" rel="alternate"></link><updated>2010-09-23T14:35:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-09-23:fossrit/lemons-taking-off.html</id><summary type="html">&lt;p&gt;It looks like Lemonade Stand is taking off for fall quarter's &lt;a class="reference external" href="http://teachingopensource.org/index.php/RIT/The_Course"&gt;HFOSS&lt;/a&gt;
class. This is quite exciting and there's a number of things I'm looking
to get in for a 2.2 release
* More events
* Fluctuating prices
* Loyalty and advertising
among &lt;a class="reference external" href="http://wiki.sugarlabs.org/go/Lemonade_Stand#Additional_Ideas_.26_Features"&gt;others&lt;/a&gt;.
The 2.1 release, meanwhile, I would like to focus on usability and
graphics, as those have been being worked on for the longest so far.
Whether any of this will work out the way I'm imagining is debatable,
but I've got a plan and two &lt;a class="reference external" href="http://smw-os.blogspot.com/"&gt;awesome&lt;/a&gt; &lt;a class="reference external" href="http://jtmengel.blogspot.com"&gt;people&lt;/a&gt; working on it with me&lt;/p&gt;
</summary><category term="lemonade"></category><category term="sugar"></category></entry><entry><title>Refreshing Lemonade</title><link href="http://nathanielca.se/fossrit/refreshing-lemonade.html" rel="alternate"></link><updated>2010-09-23T14:04:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-09-23:fossrit/refreshing-lemonade.html</id><summary type="html">&lt;p&gt;In other news, yesterday marked the &lt;a class="reference external" href="http://blog.jlewopensource.com/2010/07/lemonade-stand-release.html"&gt;final release of Lemonade
Stand 2.0&lt;/a&gt;. Now running on the &lt;a class="reference external" href="https://fedorahosted.org/fortune_hunter/wiki/FortuneEngine"&gt;Fortune Engine&lt;/a&gt; and containing 0% of
my code, this marks an important milestone in my open-source
&lt;a class="reference external" href="http://sugarlabs.org/"&gt;sugar-based&lt;/a&gt; lemonade stand game as it's still getting developed!
While I can claim none of the credit for the code, it is still
satisfying to watch my very first open source project still on its feet,
teetering around like a drunken toddler.&lt;/p&gt;
</summary><category term="lemonade"></category><category term="sugar"></category></entry><entry><title>Wikiotics</title><link href="http://nathanielca.se/fossrit/wikiotics.html" rel="alternate"></link><updated>2010-09-20T19:45:00-04:00</updated><author><name>Nathaniel Case</name></author><id>tag:nathanielca.se,2010-09-20:fossrit/wikiotics.html</id><summary type="html">&lt;p&gt;As of Friday, I have been doing some work (along with &lt;a class="reference external" href="http://trosehfoss.blogspot.com/"&gt;Taylor&lt;/a&gt; for a
new set of people, &lt;a class="reference external" href="http://alpha.wikiotics.org"&gt;Wikiotics&lt;/a&gt;. Their goal is basically to create a
FLOSS alternative to some of the commercial translation software out
there, particularly the ever-so-expensive Rosetta Stone. The whole thing
is built on a custom wiki platform called &lt;a class="reference external" href="http://code.ductus.us/"&gt;Ductus&lt;/a&gt;.
Today, I cloned their development tree for local development, located at
&lt;a class="reference external" href="http://gitorious.org/ductus-rit/"&gt;http://gitorious.org/ductus-rit/&lt;/a&gt;. Right now, nothing's been done to
it, but this will be the staging area for our work here at RIT (and
anyone who wants to get any additions into our tree) before going off to
the master tree at ductus.us.
We're still figuring out where everyone stands with development. I think
the guys at ductus are pleasantly surprised at how much we already have
under our belts here at the FOSSBOX. But that's just how we roll here at
RIT.&lt;/p&gt;
</summary><category term="wikiotics"></category></entry></feed>